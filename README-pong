# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
score1 = 0
score2 = 0
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH // 2, HEIGHT // 2]
ball_vel = [0, 0]
direction = RIGHT

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel
    #Initialize the ball position in the center of the canvas
    ball_pos = [WIDTH // 2, HEIGHT // 2]
    
    if direction == RIGHT:
        #UPPER RIGHT
        ball_vel [0] = random.randrange(120, 240) / 60
        ball_vel [1] = -random.randrange(60, 180) / 60  
    else:
        #UPPER LEFT
        ball_vel [0] = -random.randrange(120, 240) / 60
        ball_vel [1] = -random.randrange(60, 180) / 60

# that function is started as soon as the frame start, AND allow to initialize a new game through the button
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = [[8, 160], [8, 240]] #[[PAD_WIDTH, HEIGHT / 2 - HALF_PAD_HEIGHT], [PAD_WIDTH, HEIGHT / 2 + HALF_PAD_HEIGHT]]
    paddle2_pos = [[592, 160], [592, 240]] #[[WIDTH - PAD_WIDTH, HEIGHT / 2 - HALF_PAD_HEIGHT], [WIDTH - PAD_WIDTH, HEIGHT / 2 + HALF_PAD_HEIGHT]]
    paddle1_vel = [[0, 0], [0, 0]]
    paddle2_vel = [[0, 0], [0, 0]]
    score1 = 0
    score2 = 0
    spawn_ball(direction)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    
    update_ball()
    update_paddle()
        
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, 'grey', 'White')
    canvas.draw_line(paddle1_pos[0], paddle1_pos[1], 8, 'White')
    canvas.draw_line(paddle2_pos[0], paddle2_pos[1], 8, 'White')
    canvas.draw_text(str(score2), [(WIDTH/2)+(WIDTH/12), HEIGHT / 4], 24, 'White')
    canvas.draw_text(str(score1), [(WIDTH/2)-(WIDTH/12), HEIGHT / 4], 24, 'White')
 
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
def update_ball():
    global ball_pos, ball_vel,score1, score2
    # update ball position in the canvas
    ball_pos [0] = ball_pos[0] + ball_vel [0]
    ball_pos [1] = ball_pos[1] + ball_vel [1]
    
    #update ball in case of collision with top/bottom sides.
    if ball_pos [1] == BALL_RADIUS or ball_pos [1] == (HEIGHT - BALL_RADIUS):
        ball_vel [1] = - ball_vel [1]
        
    #update score considering the ball passed through the gutters
    if ball_pos[0] >= (WIDTH - PAD_WIDTH):
        score1 += 1
        return spawn_ball(LEFT)
    if ball_pos[0] <= PAD_WIDTH:
        score2 += 1
        return spawn_ball(RIGHT)
     
    #update ball in case of collision with paddles
    #I choose to accelerate the velocity of the ball every time it touch a paddle.
    if (ball_pos[1] in range(paddle1_pos[0][1], paddle1_pos[1][1])) and (ball_pos[0]-BALL_RADIUS <= PAD_WIDTH):
        ball_vel[0] = -1.2*ball_vel[0]
    if (ball_pos[1] in range(paddle2_pos[0][1], paddle2_pos[1][1])) and (ball_pos[0]+BALL_RADIUS >= WIDTH-PAD_WIDTH):
        ball_vel[0] = -1.2*ball_vel[0]
            
            
def update_paddle():
    global paddle1_pos, paddle1_vel, paddle2_pos, paddle2_vel
    
    #update paddle1 position and to stay on the canvas by a continuous mouvement
    if (paddle1_pos[0][1] < 0) and (paddle1_pos[1][1] < 0):
        paddle1_pos[0][1] = HEIGHT - PAD_HEIGHT
        paddle1_pos[1][1] = HEIGHT
    elif (paddle1_pos[0][1] > HEIGHT) and (paddle1_pos[1][1] > HEIGHT):
        paddle1_pos[0][1] = 0
        paddle1_pos[1][1] = PAD_HEIGHT
    else:
        paddle1_pos [0][1] = paddle1_pos [0][1] + paddle1_vel [0][1]
        paddle1_pos [1][1] = paddle1_pos [1][1] + paddle1_vel [1][1]
    
    #update paddle2 position and to stay on the canvas by a continuous mouvement
    if (paddle2_pos[0][1] < 0) and (paddle2_pos[1][1] < 0):
        paddle2_pos[0][1] = HEIGHT - PAD_HEIGHT
        paddle2_pos[1][1] = HEIGHT
    elif (paddle2_pos[0][1] > HEIGHT) and (paddle2_pos[1][1] > HEIGHT):
        paddle2_pos[0][1] = 0
        paddle2_pos[1][1] = PAD_HEIGHT
    else:
        paddle2_pos [0][1] = paddle2_pos [0][1] + paddle2_vel [0][1]
        paddle2_pos [1][1] = paddle2_pos [1][1] + paddle2_vel [1][1]
    

def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['W']:
        paddle1_vel [0][1] = -10
        paddle1_vel [1][1] = -10
    if key == simplegui.KEY_MAP['S']:
        paddle1_vel [0][1] = 10
        paddle1_vel [1][1] = 10
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel [0][1] = -10
        paddle2_vel [1][1] = -10
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel [0][1] = 10
        paddle2_vel [1][1] = 10
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['W'] or key == simplegui.KEY_MAP['S']:
        paddle1_vel = [[0, 0], [0, 0]]
    if key == simplegui.KEY_MAP['up'] or key == simplegui.KEY_MAP['down']:
        paddle2_vel = [[0, 0], [0, 0]]


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('NEW GAME', new_game)


# start frame
new_game()
frame.start()
