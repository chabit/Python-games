# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
#Constant for the friction
C = 0.05 # 0 <= X < 0.2
#Constant for acceleration
K = 0.3 # 0.1 < X < 1
rock_group = set([])
missile_group = set([])
explosion_group = set([])
collision = False
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(0.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]] #[0, 0] initially
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        if self.thrust:
            self.image_center[0] = 135 #Tried to replace by 3*(WIDTH/4) but DOES NOT WORK ???
        else:
            self.image_center[0] = 45 #Same for WIDTH/4
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        self.angle += self.angle_vel
        self.vel[0] *= (1-C)
        self.vel[1] *= (1-C)
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.pos[0] %= WIDTH
        self.pos[1] %= HEIGHT
        
        forward = angle_to_vector(self.angle)
        if self.thrust:
            ship_thrust_sound.play()
            ship_thrust_sound.set_volume(0.5)
            self.vel[0] += forward[0]*K
            self.vel[1] += forward[1]*K
        else:
            ship_thrust_sound.rewind()
            
    def shoot(self):
        global missile_group, vel
        vel = [0, 0]
        forward = angle_to_vector(self.angle)
        vel = [self.vel[0] + forward[0]*12, self.vel[1] + forward[1]*12]
        pos = [self.pos[0] + forward[0]*45, self.pos[1] + forward[1]*45]
        a_missile = Sprite(pos, vel, 0, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
        missile_sound.play()

    def get_pos(self):
        return self.pos
    
    def get_rad(self):
        return self.radius
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        center = list(self.image_center)
        if self.animated:
            center[0] = self.image_center[0] + (self.image_size[0] * self.age)
        canvas.draw_image(self.image, center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        self.angle += self.angle_vel
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.pos[0] %= WIDTH
        self.pos[1] %= HEIGHT
        self.age += 1
        if self.age >= self.lifespan:
            return True
        else:
            return False
        
    def collide(self, other_object):
        global collision
        if math.sqrt((other_object.get_pos()[1] - self.get_pos()[1])**2 + (other_object.get_pos()[0] - self.get_pos()[0])**2) <= (self.get_rad() + other_object.get_rad()):
            collision = True
        else:
            collision = False
        return collision
    
    def get_pos(self):
        return self.pos
    
    def get_rad(self):
        return self.radius
           
def draw(canvas):
    global time, rock_group, lives, score, started
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    
    canvas.draw_text('Lives: '+str(lives), (50, 30), 24, 'Red')
    canvas.draw_text('Score: '+str(score), (650, 30), 24, 'Red')

    if lives >= 0:
        if group_collide(rock_group, my_ship):
            lives -= 1
        if group_group_collide(missile_group, rock_group):
            score += 1
    
    if lives < 0:
        canvas.draw_text('GAME OVER, looser', (150, 100), 60, 'Red')
        ship_thrust_sound.rewind()
        started = False
        rock_group = set([])
        
    if started == False:
        soundtrack.rewind()
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
        
    # draw ship and sprites
    my_ship.draw(canvas)
    # update ship and sprites
    my_ship.update()
    
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)
    
def click(pos):
    global started, score, lives
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    score = 0
    lives = 3
    if (not started) and inwidth and inheight:
        started = True
        
# timer handler that spawns a rock
# Create a rock-object draw anywhere in the canvas every second
# going in any direction possibly
# with a random angle_vel.
def rock_spawner():
    global rock_group
    ang_vel = random.randrange(-10, 11, 2)
    my_ang_vel = ang_vel / 100.0
    a_rock = Sprite([random.randrange(0, WIDTH), random.randrange(0, HEIGHT)], 
                    [random.randrange(-1, 2), random.randrange(-1, 2)], 0, my_ang_vel, asteroid_image, asteroid_info)
    if len(rock_group) <= 11 and started:
        rock_group.add(a_rock)
        
def process_sprite_group(sprites, canvas):
    remove = set([])
    for p in sprites:
        p.draw(canvas)
        if p.update() and True:
            remove.add(p)
            sprites.difference_update(remove)
            
def group_collide(set_group, other_object):
    global explosion_group
    collisions = 0
    rms = set([])
    for s in set_group:
        if s.collide(other_object):
            collisions += 1
            rms.add(s)
            explosion_group.add(Sprite(s.pos, [0,0], 0, 0, explosion_image, explosion_info, explosion_sound))
        set_group.difference_update(rms)
    return collisions



def group_group_collide(set_group1, set_group2):
    collisions = 0
    for t in set_group1:
        if group_collide(set_group2, t):
            collisions += 1
            set_group1.discard(t)
    return collisions
    

def key_down(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = -0.2
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0.2
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True
    elif key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
        
def key_up(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False
        
def input_fric(text_fric):
    global C
    C = float(text_fric)

def input_acc(text_acc):
    global K
    K = float(text_acc)
    
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
# Create a rock-object draw anywhere in the canvas, going in any direction possibly, with a angle_vel of 0.1
#a_rock = Sprite([WIDTH / 3, HEIGHT / 3], [1, 1], 0, 1, asteroid_image, asteroid_info)
#a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [1, 1], 0, 0, missile_image, missile_info, missile_sound)
#my_rocket = Ship([WIDTH / 2, HEIGHT / 2], [1, 1], 0, missile_image, missile_info)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(key_down)
frame.set_keyup_handler(key_up)
frame.set_mouseclick_handler(click)
timer = simplegui.create_timer(1000.0, rock_spawner)
frame.add_input('Choose your friction forces (From 0 to 0.2, 0.05 by default)', input_fric, 50)
frame.add_input('At which acceleration (From 0.1 to 1, 0.3 by default)? ', input_acc, 50)

# get things rolling
timer.start()
frame.start()
